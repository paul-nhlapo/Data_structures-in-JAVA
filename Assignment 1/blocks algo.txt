        // for (int i = 0; i < (numRows * numCols); i++) {
        // Cell ptr = blocks[i];
        // for (int j = 0; j < numRows * numCols; j++) {
        // if (j < numRows * numCols) {
        // ptr.block = cells[i * numRows * numCols + j];
        // } else {
        // ptr.block = null;
        // }
        // ptr = ptr.block;
        // }
        // }
        // Here's how you can implement the same logic in Java
        // import java.util.ArrayList;
        // import java.util.List;

        // public class SudokuHelper {

        // public static List<Pair<Integer, Integer>> getSubblockHeads(int[][] board) {
        // int boardSize = board.length;
        // int subblockSize = (int) Math.sqrt(boardSize);
        // List<Pair<Integer, Integer>> subblockHeads = new ArrayList<>();
        // for (int row = 0; row < boardSize; row += subblockSize) {
        // for (int col = 0; col < boardSize; col += subblockSize) {
        // subblockHeads.add(new Pair<>(row, col));
        // }
        // }
        // return subblockHeads;
        // }

        // }
        // In this Java implementation, we use the Pair class from the javafx.util
        // package to represent the indices of the top-left cell of each sub-block. If
        // you're using a version of Java that doesn't include JavaFX, you can define
        // your own Pair class, or use a different class such as
        // java.util.AbstractMap.SimpleImmutableEntry.

        // You can call the getSubblockHeads() method by passing in a 2D array of
        // integers representing the Sudoku board, like this:
        // int[][] board = { { 5, 3, 0, 0, 7, 0, 0, 0, 0 },
        // { 6, 0, 0, 1, 9, 5, 0, 0, 0 },
        // { 0, 9, 8, 0, 0, 0, 0, 6, 0 },
        // { 8, 0, 0, 0, 6, 0, 0, 0, 3 },
        // { 4, 0, 0, 8, 0, 3, 0, 0, 1 },
        // { 7, 0, 0, 0, 2, 0, 0, 0, 6 },
        // { 0, 6, 0, 0, 0, 0, 2, 8, 0 },
        // { 0, 0, 0, 4, 1, 9, 0, 0, 5 },
        // { 0, 0, 0, 0, 8, 0, 0, 7, 9 } };
        // List<Pair<Integer, Integer>> subblockHeads =
        // SudokuHelper.getSubblockHeads(board);
        // System.out.println(subblockHeads);
        // [(0, 0), (0, 3), (0, 6), (3, 0), (3, 3), (3, 6), (6, 0), (6, 3), (6, 6)]

        // Use the algorithm above to implement the getSubblockHeads() method in the
        // SudokuHelper class. The method should take a any 2D array of integers
        // representing the Sudoku board as input, and return a list of pairs of
        // integers representing the indices of the top-left cell of each sub-block.